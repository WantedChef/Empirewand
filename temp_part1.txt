package nl.wantedchef.empirewand.spell.toggle.movement;

import java.time.Duration;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.WeakHashMap;

import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.Location;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitTask;
import org.bukkit.util.Vector;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import net.kyori.adventure.bossbar.BossBar;
import net.kyori.adventure.text.Component;
import nl.wantedchef.empirewand.api.EmpireWandAPI;
import nl.wantedchef.empirewand.api.spell.toggle.ToggleableSpell;
import nl.wantedchef.empirewand.spell.PrereqInterface;
import nl.wantedchef.empirewand.spell.Spell;
import nl.wantedchef.empirewand.spell.SpellContext;
import nl.wantedchef.empirewand.spell.SpellType;

/**
 * StormRider 2.0 - Devastating storm aura that commands the fury of nature.
 *
 * Features:
 * - Massive storm aura with dark storm clouds surrounding the caster
 * - Living entities entering the aura trigger 3 lightning strikes on themselves
 * - Continuous storm cloud particles and electrical effects
 * - Thunder and lightning sounds for immersive storm experience
 * - Storm intensity that builds over time
 * - Configurable aura radius and lightning damage
 */
public final class StormRider extends Spell<Void> implements ToggleableSpell {

    private final Map<UUID, StormAuraData> stormAuras = new WeakHashMap<>();

    public static class Builder extends Spell.Builder<Void> {
        public Builder(EmpireWandAPI api) {
            super(api);
            name = "Storm Aura";
            description = "Summon a devastating storm aura that strikes intruders with lightning.";
            cooldown = Duration.ofSeconds(5);
            spellType = SpellType.AURA;
        }

        @Override
        public @NotNull Spell<Void> build() {
            return new StormRider(this);
        }
    }

    private StormRider(Builder builder) {
        super(builder);
    }

    /* ---------------------------------------- */
    /* SPELL API */
    /* ---------------------------------------- */
    @Override
    public @NotNull String key() {
        return "storm-rider";
    }

    @Override
    public @NotNull PrereqInterface prereq() {
        return new PrereqInterface.NonePrereq();
    }

    @Override
    protected @Nullable Void executeSpell(@NotNull SpellContext context) {
        toggle(context.caster(), context);
        return null;
    }

    @Override
    protected void handleEffect(@NotNull SpellContext context, @NotNull Void result) {
        // Instant effect
    }

    @Override
    public boolean isActive(@NotNull Player player) {
        return stormAuras.containsKey(player.getUniqueId());
    }

    @Override
    public void activate(@NotNull Player player, @NotNull SpellContext context) {
        if (isActive(player))
            return;
        stormAuras.put(player.getUniqueId(), new StormAuraData(player, context));
    }

    @Override
    public void deactivate(@NotNull Player player, @NotNull SpellContext context) {
        Optional.ofNullable(stormAuras.remove(player.getUniqueId())).ifPresent(StormAuraData::stop);
    }

    @Override
    public void forceDeactivate(@NotNull Player player) {
        Optional.ofNullable(stormAuras.remove(player.getUniqueId())).ifPresent(StormAuraData::stop);
    }

    @Override
    public int getMaxDuration() {
        return cfgInt("max-duration-ticks", 1800); // 1.5 minutes default
    }

    private final class StormAuraData {
        private final Player player;
        private final SpellContext context;
        private final BossBar stormIntensityBar = BossBar.bossBar(
            Component.text("Storm Intensity"),
            0.1f,
            BossBar.Color.PURPLE,
            BossBar.Overlay.PROGRESS
        );
        private final BukkitTask ticker;
        private final Set<UUID> recentlyStruck = new HashSet<>();

        // Storm aura variables
        private int tickCounter = 0;
        private double stormIntensity = 0.1;
        private double auraPhase = 0;
        private int entitiesStruck = 0;

        StormAuraData(Player player, SpellContext context) {
            this.player = player;
            this.context = context;

            player.showBossBar(stormIntensityBar);

            // Storm aura activation sounds
            player.playSound(player.getLocation(), Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 1.0f, 0.8f);
            player.playSound(player.getLocation(), Sound.WEATHER_RAIN_ABOVE, 0.8f, 1.0f);
            player.playSound(player.getLocation(), Sound.ITEM_TRIDENT_THUNDER, 0.6f, 1.2f);

            // Show storm aura activation message
            player.sendMessage(Component.text(
                    "Â§9âš¡ Â§5The storm gathers around you, ready to strike your foes! Â§9âš¡"));

            // Spawn initial storm aura effect
            spawnStormActivationEffect();

            // Start the storm aura ticker
            this.ticker = Bukkit.getScheduler().runTaskTimer(context.plugin(), this::tick, 0, 1);
        }

        void stop() {
            ticker.cancel();
            player.hideBossBar(stormIntensityBar);

            // Final storm dissipation effect
            spawnStormDeactivationEffect();

            player.sendMessage(Component.text("Â§9âš¡ Â§7The storm dissipates, its fury spent... Â§9âš¡"));
            player.playSound(player.getLocation(), Sound.WEATHER_RAIN_ABOVE, 0.4f, 0.6f);
        }

        private void tick() {
            if (!player.isOnline()) {
                forceDeactivate(player);
                return;
            }

            tickCounter++;
            auraPhase += 0.2;

            // Gradually build storm intensity
            stormIntensity = Math.min(1.0, stormIntensity + cfgDouble("storm.intensity-growth", 0.002));

            Location playerLoc = player.getLocation();

            // Update boss bar
            stormIntensityBar.progress((float) stormIntensity);
            stormIntensityBar.name(Component.text("Storm Intensity - Entities Struck: " + entitiesStruck));

            // Spawn storm aura visual effects
            spawnStormAura(playerLoc);

            // Check for entities entering the aura and strike them with lightning
            checkForLightningTargets(playerLoc);

            // Clean up recently struck entities list periodically
            if (tickCounter % 100 == 0) {
                recentlyStruck.clear();
            }

            // Play ambient storm sounds
            playStormSounds(playerLoc);
        }
        private void spawnStormAura(Location center) {
            World world = center.getWorld();
            double auraRadius = cfgDouble("aura.radius", 8.0);
            int cloudParticles = cfgInt("aura.cloud-particles", 40);

            // Storm cloud particles around the aura perimeter
            for (int i = 0; i < cloudParticles; i++) {
                double angle = 2 * Math.PI * i / cloudParticles + auraPhase * 0.5;
                double radius = auraRadius * (0.8 + 0.2 * Math.sin(auraPhase + i * 0.3));
                double x = Math.cos(angle) * radius;
                double z = Math.sin(angle) * radius;
                double y = 2.0 + Math.sin(auraPhase * 0.7 + angle * 2) * 1.2 * stormIntensity;

                Location cloudLoc = center.clone().add(x, y, z);

                // Dark storm clouds
                world.spawnParticle(Particle.SMOKE, cloudLoc, 2, 0.3, 0.2, 0.3, 0.02);
